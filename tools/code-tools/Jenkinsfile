// Build once a day
CRON_SETTINGS = '''H H * * *'''
NODE_LABEL = 'dockerBuild&&linux&&x64'

pipeline {
    agent none
    triggers {
        cron(CRON_SETTINGS)
    }
    stages {
        stage('Build') {
            parallel {
                stage('asmtools') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('asmtools')
                    }
                }
                stage('jtreg') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('jtreg')
                    }
                }
            }
        }
    }
}

def build(stageName) {
    cleanWs()
    docker.image('adoptopenjdk/centos7_build_image').inside {
        try {
            checkout scm
            checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${stageName}"]], submoduleCfg: [], userRemoteConfigs: [[url: "https://github.com/openjdk/${stageName}"]]])
            sh label: "${stageName}", script: "./tools/code-tools/${stageName}.sh"
            archiveArtifacts artifacts: "${stageName}/*.tar.gz, ${stageName}/${stageName}.jar, ${stageName}/${stageName}.jar.*.txt, ${stageName}/*.tar.gz.*sum*.txt", followSymlinks: false
        } catch (Exception e) {
            slackSend channel: 'jenkins', color: 'danger', message: "${env.JOB_NAME} : #${env.BUILD_NUMBER} : ${stageName}() FAILED with following error message:\n${e}", teamDomain: 'adoptium'
            throw new Exception("[ERROR] ${stageName} FAILED\n${e}")
        }
    }
}
