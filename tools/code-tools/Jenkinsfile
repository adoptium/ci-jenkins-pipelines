// Build once a day
CRON_SETTINGS = '''H H * * *'''
NODE_LABEL = 'dockerBuild&&linux&&x64'

pipeline {
    agent none
    triggers {
        cron(CRON_SETTINGS)
    }
    options {
        buildDiscarder logRotator(daysToKeepStr: '30', numToKeepStr: '10')
    }
    stages {
        stage('Build') {
            parallel {
                stage('asmtools') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('asmtools')
                    }
                }
                stage('jcstress') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('jcstress')
                    }
                }
                stage('jtreg') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('jtreg')
                    }
                }
                stage('jtharness') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('jtharness')
                    }
                }
                stage('sigtest') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('sigtest')
                    }
                }
                stage('jcov') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('jcov')
                    }
                }
                stage('jmh') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('jmh')
                    }
                }
                stage('temurin-sbom') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('temurin-sbom')
                    }
                }
            }
        }
    }
}

def build(stageName) {
    cleanWs()
    docker.image('adoptopenjdk/centos7_build_image').inside {
        try {
            checkout scm
            script {
                def toolsUrl = "https://github.com/openjdk/${stageName}"
                if ( stageName == 'temurin-sbom' ) {
                    toolsUrl = "https://github.com/adoptium/temurin-build.git"
                }
                checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${stageName}"]], submoduleCfg: [], userRemoteConfigs: [[url: toolsUrl]]])
            }
            sh label: "${stageName}", script: "./tools/code-tools/${stageName}.sh"
            archiveArtifacts artifacts: "**/temurin-*-sbom.jar, ${stageName}/*.tar.gz, ${stageName}/${stageName}*.jar, ${stageName}/${stageName}*.jar.*.txt,${stageName}/${stageName}*.tar.gz.*.txt, ${stageName}/*.tar.gz.*sum*.txt, ${stageName}/*.zip.*sum*.txt, ${stageName}/${stageName}*.jar.html, ${stageName}/${stageName}*.jar.md, ${stageName}/${stageName}*.zip, ${stageName}/javatest*.jar, ${stageName}/javatest*sum*.txt", followSymlinks: false
        } catch (Exception e) {
            slackSend channel: 'jenkins', color: 'danger', message: "${env.JOB_NAME} : #${env.BUILD_NUMBER} : ${stageName}() FAILED with following error message:\n${e}", teamDomain: 'adoptium'
            throw new Exception("[ERROR] ${stageName} FAILED\n${e}")
        }
    }
}
