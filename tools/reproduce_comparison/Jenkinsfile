/*
Jenkins job does comparison for two different build artifacts
If they are identical, build pass; or fail
*/

pipeline {
    agent any
    parameters {
        choice(choices: ['linux', 'mac', 'windows'], name: 'platform', description:'select release on different platform')
        string(name: 'URL1', defaultValue: '', description: 'URL to one version of the build artifacts\ne.g.: https://ci.adoptium.net/job/build-scripts/job/openjdk18-pipeline/lastSuccessfulBuild/artifact/target/linux/x64/temurin/OpenJDK18U-jdk_x64_linux_hotspot_2022-06-11-23-30.tar.gz')
        string(name: 'URL2', defaultValue: '', description: 'URL to the other version of the build artifacts\ne.g.: https://github.com/adoptium/temurin19-binaries/releases/download/jdk-2022-06-09-19-11-beta/OpenJDK-jdk_x64_linux_hotspot_2022-06-09-03-31.tar.gz')
        string(name: 'excludeFiles', defaultValue: 'classes_nocoops.jsa', description: 'File names to be excluded while doing the comparison, separated by `;`')
    }

    stages {
        stage('Prepare') { //Copy artifacts, reset parameters,trigger build and copyArtifacts
            steps {
                cleanWs()
                checkout scm
                copyArtifacts excludes: '**/OpenJDK*-sbom*metadata.json', 
                                filter: '**/OpenJDK*-jdk*.tar.gz,**/OpenJDK*-sbom*.json',
                                fingerprintArtifacts: true, 
                                flatten: true, 
                                projectName: "${params.COMPARED_JOB_NAME}",
                                target: 'original/'
                                selector: specific("${params.COMPARED_JOB_NUMBER}")
                script {
                    def sbomFiles = findFiles(glob: "**/*.json")
                    def sbomParams = readJSON file: "${sbomFiles[0].name}"
                    def buildTimeStamp = sbomParams.metadata.timestamp

                    def sbomProperties = sbomParams.components[0].properties
                    def reproducedParams = [:]
                    sbomProperties.each { propertyItem -> 
                        def paramFound = false
                        propertyItem.each { key, value ->
                            if (value in ["SCM Ref", "OpenJDK Source Commit", "Temurin Build Ref"]) {
                                paramFound = true
                            }
                        }
                        if (paramFound) {
                            reproducedParams.put("${propertyItem.name}", "${propertyItem.value}")
                        }
                    }

                    def scmRef = reproducedParams["SCM Ref"]
                    def buildRef = reproducedParams["Temurin Build Ref"]
                    buildRef = buildRef.substring(buildRef.lastIndexOf('/')+1)
                    def scmCommit = reproducedParams["OpenJDK Source Commit"]
                    scmCommit = scmCommit.substring(scmCommit.lastIndexOf('/')+1)

                    // Convert COMPARED_JOB_PARAMS to json formatt string
                    def jobParams = COMPARED_JOB_PARAMS.replaceAll("=", ':')
                    jobParams = jobParams.replace("ADOPT_DEFAULTS_JSON", "ADOPT_DEFAULTS_TEMP")
                    jobParams = jobParams.replace("DEFAULTS_JSON", "\"DEFAULTS_JSON\"")
                    jobParams = jobParams.replace("USER_REMOTE_CONFIGS", "\"USER_REMOTE_CONFIGS\"")
                    jobParams = jobParams.replace("ADOPT_DEFAULTS_TEMP", "\"ADOPT_DEFAULTS_JSON\"")
                    jobParams = jobParams.replace("BUILD_CONFIGURATION", "\"BUILD_CONFIGURATION\"")
                    
                    def jsonJobParams = new groovy.json.JsonSlurper().parseText(jobParams)
                    jsonJobParams.BUILD_CONFIGURATION.SCM_REF = scmRef
                    jsonJobParams.BUILD_CONFIGURATION.BUILD_REF = buildRef
                    jsonJobParams.BUILD_CONFIGURATION.BUILD_ARGS += " --build-reproducible-date ${buildTimeStamp}" //'${buildTimeStamp}'
                    jsonJobParams.BUILD_CONFIGURATION.ENABLE_TESTS = "false"
                    
                    def buildParams = [
                        text(name: 'BUILD_CONFIGURATION', value: "${jsonJobParams.BUILD_CONFIGURATION}"),
                        text(name: 'USER_REMOTE_CONFIGS', value: "${jsonJobParams.USER_REMOTE_CONFIGS}"),
                        text(name: 'DEFAULTS_JSON', value: "${jsonJobParams.DEFAULTS_JSON}"),
                        text(name: 'ADOPT_DEFAULTS_JSON', value: "${jsonJobParams.ADOPT_DEFAULTS_JSON}")
                    ]
                    def reproducibleJob = build job: "${COMPARED_JOB_NAME}",
                            propagate: false,
                            parameters: buildParams
                    
                    def result = reproducibleJob.getResult()
                    if (result == 'SUCCESS') {
                        try {
                            timeout(time: 2, unit: 'HOURS') {
                                copyArtifacts(
                                    projectName:"${COMPARED_JOB_NAME}",
                                    selector:specific("${reproducibleJob.getNumber()}"),
                                    filter: "**/*.tar.gz",
                                    target: 'reproduced/',
                                    fingerprintArtifacts: true,
                                    flatten: true
                                )
                            }
                        } catch (Exception e) {
                            echo "Cannot run copyArtifacts from job ${COMPARED_JOB_NAME}. Exception: ${e.message}. Skipping copyArtifacts..."
                        }
                    } else {
                        error "Reproducible jenkins job ${COMPARED_JOB_NAME} failed, exit comparision"
                        return
                    }

                    def originalJDKFile = findFiles(glob: "original/*.tar.gz")
                    def reproducedJDKFile = findFiles(glob: "reproduced/*.tar.gz")
                    def result1 = sh returnStatus: true, script: "tar -xz ${originalJDKFile[0].name} -C original"
                    if (result1 != 0 ) {
                        currentBuild.result = 'UNSTABLE'
                        error " Untar ${originalJDKFile[0].name} failed"
                        return
                    } 
                    def result2 = sh returnStatus: true, script: "tar -xz ${reproducedJDKFile[0].name} -C reproduced"
                    if (result2 != 0 ) {
                        currentBuild.result = 'UNSTABLE'
                        error " Untar ${reproducedJDKFile[0].name} failed"
                        return
                    }
                }
            }
            steps {
                script {
                    try {
                        cleanWs()
                        // use Jenkins crendential to download JDK if source is from openjdkX-pipline
                        withCredentials([usernamePassword(credentialsId: 'eclipse_temurin_bot_email_and_token', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                            echo "Fetching artifact1 from ${params.URL1}"
                            def ret1 = sh returnStatus: true, script: "mkdir url1Dir1 && curl -s --user ${USERNAME}:${PASSWORD} ${params.URL1} | tar -xz  -C url1Dir1"
                            if (ret1 != 0) {
                                currentBuild.result = 'UNSTABLE'
                                error 'Stopping after download and uncompress tar file'
                            }
                            echo "Fetching artifact2 from ${params.URL2}"
                            def ret2 = sh returnStatus: true, script: "mkdir url1Dir2 && curl -s --user ${USERNAME}:${PASSWORD} ${params.URL2} | tar -xz  -C url1Dir2"
                            if (ret2 != 0) {
                                currentBuild.result = 'UNSTABLE'
                                error 'Stopping after download and uncompress tar file'
                            }
                        }
                        // call extra platform specific function
                        if (params.platform != 'linux') {
                            "prep${platform}" ('url1Dir1', 'url1Dir2')
                        }
                        def excludeFlags=""
                        def excludeFileList = excludeFiles.split(';')
                        for(String excludeFile in excludeFileList) {
                            excludeFlags="${excludeFlags} --exclude=${excludeFile}"
                        }
                        def retVal = sh returnStatus: true, script: "diff -q -r url1Dir1 url1Dir2 ${excludeFlags}"
                        if (retVal != 0) {
                            currentBuild.result = 'FAILURE'
                            error 'Error: two builds are not the same!'
                        } else {
                            echo 'Success: two builds are the same!'
                        }
                    } catch (Exception err) {
                        echo err.getMessage()
                        currentBuild.result = 'FAILURE'
                    } finally {
                        cleanWs()
                    }
                }
            }
        }
    }
}

/* TODO:
set correct defaultpath for localCert
see: https://github.com/adoptium/temurin-build/issues/3015#issuecomment-1175322612
*/
def prepmac(String jdk1, String jdk2, String localCert='defaultpath') {
    sh "chmod 776 ${WORKSPACE}/tools/reproduce_comparison/compareMacOS.sh"
    sh "${WORKSPACE}/tools/reproduce_comparison/compareMacOS.sh $jdk1 $jdk2 $localCert skip"
}

/*
TODO: placeholder for windows comparison
def prepwindows(String jdk1, String jdk2, ...) {
   sh "./tools/reproduce_comparison/compareWindows.sh ..."
}
*/
